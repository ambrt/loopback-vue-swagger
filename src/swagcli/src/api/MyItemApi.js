/**
 * loop
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import MyItem from '../model/MyItem';

/**
* MyItem service.
* @module api/MyItemApi
* @version 1.0.0
*/
export default class MyItemApi {

    /**
    * Constructs a new MyItemApi. 
    * @alias module:api/MyItemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the myItemCount operation.
     * @callback module:api/MyItemApi~myItemCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count instances of the model matched by where from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:api/MyItemApi~myItemCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    myItemCount(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'where': opts['where']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/myitems/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemCreate operation.
     * @callback module:api/MyItemApi~myItemCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new instance of the model and persist it into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/MyItem} opts.data Model instance data
     * @param {module:api/MyItemApi~myItemCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyItem}
     */
    myItemCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['data'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = MyItem;

      return this.apiClient.callApi(
        '/myitems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemCreateChangeStreamGetMyitemsChangeStream operation.
     * @callback module:api/MyItemApi~myItemCreateChangeStreamGetMyitemsChangeStreamCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a change stream.
     * @param {Object} opts Optional parameters
     * @param {String} opts.options 
     * @param {module:api/MyItemApi~myItemCreateChangeStreamGetMyitemsChangeStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    myItemCreateChangeStreamGetMyitemsChangeStream(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'options': opts['options']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = File;

      return this.apiClient.callApi(
        '/myitems/change-stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemCreateChangeStreamPostMyitemsChangeStream operation.
     * @callback module:api/MyItemApi~myItemCreateChangeStreamPostMyitemsChangeStreamCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a change stream.
     * @param {Object} opts Optional parameters
     * @param {String} opts.options 
     * @param {module:api/MyItemApi~myItemCreateChangeStreamPostMyitemsChangeStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    myItemCreateChangeStreamPostMyitemsChangeStream(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'options': opts['options']
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = File;

      return this.apiClient.callApi(
        '/myitems/change-stream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemDeleteById operation.
     * @callback module:api/MyItemApi~myItemDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model instance by {{id}} from the data source.
     * @param {String} id Model id
     * @param {module:api/MyItemApi~myItemDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    myItemDeleteById(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myItemDeleteById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = Object;

      return this.apiClient.callApi(
        '/myitems/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemExistsGetMyitemsidExists operation.
     * @callback module:api/MyItemApi~myItemExistsGetMyitemsidExistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a model instance exists in the data source.
     * @param {String} id Model id
     * @param {module:api/MyItemApi~myItemExistsGetMyitemsidExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    myItemExistsGetMyitemsidExists(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myItemExistsGetMyitemsidExists");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/myitems/{id}/exists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemExistsHeadMyitemsid operation.
     * @callback module:api/MyItemApi~myItemExistsHeadMyitemsidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether a model instance exists in the data source.
     * @param {String} id Model id
     * @param {module:api/MyItemApi~myItemExistsHeadMyitemsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    myItemExistsHeadMyitemsid(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myItemExistsHeadMyitemsid");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/myitems/{id}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemFind operation.
     * @callback module:api/MyItemApi~myItemFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MyItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all instances of the model matched by filter from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/MyItemApi~myItemFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MyItem>}
     */
    myItemFind(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = [MyItem];

      return this.apiClient.callApi(
        '/myitems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemFindById operation.
     * @callback module:api/MyItemApi~myItemFindByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a model instance by {{id}} from the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/MyItemApi~myItemFindByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyItem}
     */
    myItemFindById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myItemFindById");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = MyItem;

      return this.apiClient.callApi(
        '/myitems/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemFindOne operation.
     * @callback module:api/MyItemApi~myItemFindOneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find first instance of the model matched by filter from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;})
     * @param {module:api/MyItemApi~myItemFindOneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyItem}
     */
    myItemFindOne(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = MyItem;

      return this.apiClient.callApi(
        '/myitems/findOne', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemPatchOrCreate operation.
     * @callback module:api/MyItemApi~myItemPatchOrCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/MyItem} opts.data Model instance data
     * @param {module:api/MyItemApi~myItemPatchOrCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyItem}
     */
    myItemPatchOrCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['data'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = MyItem;

      return this.apiClient.callApi(
        '/myitems', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemPrototypePatchAttributes operation.
     * @callback module:api/MyItemApi~myItemPrototypePatchAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch attributes for a model instance and persist it into the data source.
     * @param {String} id MyItem id
     * @param {Object} opts Optional parameters
     * @param {module:model/MyItem} opts.data An object of model property name/value pairs
     * @param {module:api/MyItemApi~myItemPrototypePatchAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyItem}
     */
    myItemPrototypePatchAttributes(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myItemPrototypePatchAttributes");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = MyItem;

      return this.apiClient.callApi(
        '/myitems/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemReplaceByIdPostMyitemsidReplace operation.
     * @callback module:api/MyItemApi~myItemReplaceByIdPostMyitemsidReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {module:model/MyItem} opts.data Model instance data
     * @param {module:api/MyItemApi~myItemReplaceByIdPostMyitemsidReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyItem}
     */
    myItemReplaceByIdPostMyitemsidReplace(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myItemReplaceByIdPostMyitemsidReplace");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = MyItem;

      return this.apiClient.callApi(
        '/myitems/{id}/replace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemReplaceByIdPutMyitemsid operation.
     * @callback module:api/MyItemApi~myItemReplaceByIdPutMyitemsidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace attributes for a model instance and persist it into the data source.
     * @param {String} id Model id
     * @param {Object} opts Optional parameters
     * @param {module:model/MyItem} opts.data Model instance data
     * @param {module:api/MyItemApi~myItemReplaceByIdPutMyitemsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyItem}
     */
    myItemReplaceByIdPutMyitemsid(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['data'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myItemReplaceByIdPutMyitemsid");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = MyItem;

      return this.apiClient.callApi(
        '/myitems/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemReplaceOrCreatePostMyitemsReplaceOrCreate operation.
     * @callback module:api/MyItemApi~myItemReplaceOrCreatePostMyitemsReplaceOrCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/MyItem} opts.data Model instance data
     * @param {module:api/MyItemApi~myItemReplaceOrCreatePostMyitemsReplaceOrCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyItem}
     */
    myItemReplaceOrCreatePostMyitemsReplaceOrCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['data'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = MyItem;

      return this.apiClient.callApi(
        '/myitems/replaceOrCreate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemReplaceOrCreatePutMyitems operation.
     * @callback module:api/MyItemApi~myItemReplaceOrCreatePutMyitemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing model instance or insert a new one into the data source.
     * @param {Object} opts Optional parameters
     * @param {module:model/MyItem} opts.data Model instance data
     * @param {module:api/MyItemApi~myItemReplaceOrCreatePutMyitemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyItem}
     */
    myItemReplaceOrCreatePutMyitems(opts, callback) {
      opts = opts || {};
      let postBody = opts['data'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = MyItem;

      return this.apiClient.callApi(
        '/myitems', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemUpdateAll operation.
     * @callback module:api/MyItemApi~myItemUpdateAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update instances of the model matched by {{where}} from the data source.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:model/MyItem} opts.data An object of model property name/value pairs
     * @param {module:api/MyItemApi~myItemUpdateAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    myItemUpdateAll(opts, callback) {
      opts = opts || {};
      let postBody = opts['data'];


      let pathParams = {
      };
      let queryParams = {
        'where': opts['where']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/myitems/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the myItemUpsertWithWhere operation.
     * @callback module:api/MyItemApi~myItemUpsertWithWhereCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MyItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     * @param {Object} opts Optional parameters
     * @param {String} opts.where Criteria to match model instances
     * @param {module:model/MyItem} opts.data An object of model property name/value pairs
     * @param {module:api/MyItemApi~myItemUpsertWithWhereCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MyItem}
     */
    myItemUpsertWithWhere(opts, callback) {
      opts = opts || {};
      let postBody = opts['data'];


      let pathParams = {
      };
      let queryParams = {
        'where': opts['where']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml'];
      let accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      let returnType = MyItem;

      return this.apiClient.callApi(
        '/myitems/upsertWithWhere', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
