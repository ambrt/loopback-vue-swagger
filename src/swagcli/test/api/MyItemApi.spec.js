/**
 * loop
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Loop);
  }
}(this, function(expect, Loop) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Loop.MyItemApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MyItemApi', function() {
    describe('myItemCount', function() {
      it('should call myItemCount successfully', function(done) {
        //uncomment below and update the code to test myItemCount
        //instance.myItemCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemCreate', function() {
      it('should call myItemCreate successfully', function(done) {
        //uncomment below and update the code to test myItemCreate
        //instance.myItemCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemCreateChangeStreamGetMyitemsChangeStream', function() {
      it('should call myItemCreateChangeStreamGetMyitemsChangeStream successfully', function(done) {
        //uncomment below and update the code to test myItemCreateChangeStreamGetMyitemsChangeStream
        //instance.myItemCreateChangeStreamGetMyitemsChangeStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemCreateChangeStreamPostMyitemsChangeStream', function() {
      it('should call myItemCreateChangeStreamPostMyitemsChangeStream successfully', function(done) {
        //uncomment below and update the code to test myItemCreateChangeStreamPostMyitemsChangeStream
        //instance.myItemCreateChangeStreamPostMyitemsChangeStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemDeleteById', function() {
      it('should call myItemDeleteById successfully', function(done) {
        //uncomment below and update the code to test myItemDeleteById
        //instance.myItemDeleteById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemExistsGetMyitemsidExists', function() {
      it('should call myItemExistsGetMyitemsidExists successfully', function(done) {
        //uncomment below and update the code to test myItemExistsGetMyitemsidExists
        //instance.myItemExistsGetMyitemsidExists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemExistsHeadMyitemsid', function() {
      it('should call myItemExistsHeadMyitemsid successfully', function(done) {
        //uncomment below and update the code to test myItemExistsHeadMyitemsid
        //instance.myItemExistsHeadMyitemsid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemFind', function() {
      it('should call myItemFind successfully', function(done) {
        //uncomment below and update the code to test myItemFind
        //instance.myItemFind(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemFindById', function() {
      it('should call myItemFindById successfully', function(done) {
        //uncomment below and update the code to test myItemFindById
        //instance.myItemFindById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemFindOne', function() {
      it('should call myItemFindOne successfully', function(done) {
        //uncomment below and update the code to test myItemFindOne
        //instance.myItemFindOne(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemPatchOrCreate', function() {
      it('should call myItemPatchOrCreate successfully', function(done) {
        //uncomment below and update the code to test myItemPatchOrCreate
        //instance.myItemPatchOrCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemPrototypePatchAttributes', function() {
      it('should call myItemPrototypePatchAttributes successfully', function(done) {
        //uncomment below and update the code to test myItemPrototypePatchAttributes
        //instance.myItemPrototypePatchAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemReplaceByIdPostMyitemsidReplace', function() {
      it('should call myItemReplaceByIdPostMyitemsidReplace successfully', function(done) {
        //uncomment below and update the code to test myItemReplaceByIdPostMyitemsidReplace
        //instance.myItemReplaceByIdPostMyitemsidReplace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemReplaceByIdPutMyitemsid', function() {
      it('should call myItemReplaceByIdPutMyitemsid successfully', function(done) {
        //uncomment below and update the code to test myItemReplaceByIdPutMyitemsid
        //instance.myItemReplaceByIdPutMyitemsid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemReplaceOrCreatePostMyitemsReplaceOrCreate', function() {
      it('should call myItemReplaceOrCreatePostMyitemsReplaceOrCreate successfully', function(done) {
        //uncomment below and update the code to test myItemReplaceOrCreatePostMyitemsReplaceOrCreate
        //instance.myItemReplaceOrCreatePostMyitemsReplaceOrCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemReplaceOrCreatePutMyitems', function() {
      it('should call myItemReplaceOrCreatePutMyitems successfully', function(done) {
        //uncomment below and update the code to test myItemReplaceOrCreatePutMyitems
        //instance.myItemReplaceOrCreatePutMyitems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemUpdateAll', function() {
      it('should call myItemUpdateAll successfully', function(done) {
        //uncomment below and update the code to test myItemUpdateAll
        //instance.myItemUpdateAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('myItemUpsertWithWhere', function() {
      it('should call myItemUpsertWithWhere successfully', function(done) {
        //uncomment below and update the code to test myItemUpsertWithWhere
        //instance.myItemUpsertWithWhere(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
